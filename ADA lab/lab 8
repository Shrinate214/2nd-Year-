public class prims {
    public static void primsMST(int graph[][]) {
        int V = graph.length;
        int[] key = new int[V];
        int[] parent = new int[V];
        Boolean[] mstSet = new Boolean[V];

        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }
        key[0] = 0;
        parent[0] = -1;

        for (int i = 0; i < V-1; i++) {
            
            int u = minKey(key, mstSet, V);

            mstSet[u] = true;

            for (int v = 0; v < V; v++) {
                if (graph[u][v] < key[v] && mstSet[v] == false && graph[u][v] != 0) {
                    key[v] = graph[u][v];
                    parent[v] = u;
                }
            }
        }
        printMst(parent, graph, V);
    }

    public static int minKey(int[] key, Boolean[] mstSet, int V) {
        int min = Integer.MAX_VALUE, minIndex = -1;
        for (int i = 0; i < V; i++) {
            if (mstSet[i] == false && key[i] < min) {
                min = key[i];
                minIndex = i;
            }
        }
        return minIndex;
    }

    public static void printMst(int[] parent, int[][] graph, int V) {

        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++) {
            
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
        }
    }

    public static void main(String[] args) {
        int graph[][] = new int[][] { { 0, 2, 0, 6, 0 },
                                      { 2, 0, 3, 8, 5 },
                                      { 0, 3, 0, 0, 7 },
                                      { 6, 8, 0, 0, 9 },
                                      { 0, 5, 7, 9, 0 } };

        primsMST(graph);
    }
}
